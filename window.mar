use glfw::*
use gl::*
use ffi::(CPtr, CStr)

struct Window { ptr: CPtr<GLFWwindow> }


struct Frame { ptr: CPtr<GLFWwindow>, is_terminated: bool }


struct Colour { r: f32, g: f32,
                b: f32, a: f32 }


enum WindowError {
    failed_to_initialise,
    failed_to_create_window,
    title_includes_null_byte: str,
}


struct WindowBuilder {
    width: u32,
    height: u32,
    name: str,
}


impl Window {
    fn should_close(self): bool {
        glfwWindowShouldClose(self.ptr) == TRUE()
    }


    fn close(&self) {
        glfwSetWindowShouldClose(self.ptr, TRUE())
    }


    fn is_key_pressed(self, key: key::Key): bool {
        let result = glfwGetKey(self.ptr, key.as_u16())
        result == PRESS()
    }


    fn start_frame(&self): Frame {
        Frame { ptr: self.ptr, is_terminated: false }
    }
}


impl Frame {
    fn end_frame(&self) {
        if self.is_terminated { return _ }

        glClear(COLOR_BUFFER_BIT())
        glfwSwapBuffers(self.ptr)
        glfwPollEvents()
    }


    fn clear_background(&self, colour: Colour) {
        glClearColor(colour.r, colour.g, colour.b, colour.a)
    }
}




impl Colour {
    fn new(r: f32, g: f32, b: f32, a: f32): Colour {
        Colour { r: r, g: g, b: b, a: a }
    }
}


impl WindowBuilder {
    fn new(): WindowBuilder {
        WindowBuilder {
            width: 800 as u32,
            height: 600 as u32,
            name: "Window"
        }
    }


    fn width(self, width: u32): WindowBuilder {
        let mut this = self
        this.width = width
        this
    }


    fn height(self, height: u32): WindowBuilder {
        let mut this = self
        this.height = height 
        this
    }


    fn title(self, name: str): WindowBuilder {
        let mut this = self
        this.name = name 
        this
    }


    fn build(self): Result<Window, WindowError> {
        // glfwInit already checks if it's already initialised
        // and returns true if it is initialised
        {
            let success = glfwInit()
            if success == FALSE() {
                return err(WindowError::failed_to_initialise())
            }
        }

        glfwWindowHint(CONTEXT_VERSION_MAJOR(), 3 as i32)
        glfwWindowHint(CONTEXT_VERSION_MINOR(), 3 as i32)
        glfwWindowHint(OPENGL_PROFILE(), OPENGL_CORE_PROFILE())


        let title = CStr::from_str(self.name)
        let window = glfwCreateWindow(
            self.width as i32,
            self.height as i32,
            title,
            CPtr::null(),
            CPtr::null(),
        )

        title.free()

        if window.is_null() {
            return err(WindowError::failed_to_create_window())
        }

        glfwMakeContextCurrent(window)

        // gotta do it externally from rust since no closures yet ;-;
        extern {
            fn loadOpenGlToGLFW()
            fn setFrameBufferCallback(window: CPtr<GLFWwindow>, width: i32, height: i32)
        }

        loadOpenGlToGLFW()
        setFrameBufferCallback(window, self.width as i32, self.height as i32)

        ok(Window { ptr: window })
    }
}

