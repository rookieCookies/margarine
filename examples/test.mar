extern {
    fn print(val: int)
    fn print_str(val: str)
    fn too<T>(val: T): T
}


impl Range {
    fn __next__(self): Option<int> {
        if self.min < self.max {
            self.min += 1
            some(self.min-1)
        } else {
            none()
        }

    }
}


fn print_opt<T>(opt: Option<T>) {
    match opt {
        some => print_str("yay"),
        none => print_str("nay"),
    }
}


fn test<T, A>(val: T, boo: A) {
}


fn foo(val: int): int {
    too(val)
}

struct Foo {}


type any


extern {
    fn new_any<T>(value: T, type_id: int): any 
    fn downcast_any<T>(ptr: any, target: int): Option<T>
}



impl any {
    fn from<T>(value: T): any {
        new_any(value, type_id::<T>())
    }


    fn cast<T>(self): Option<T> {
        downcast_any::<T>(self, type_id::<T>())
    }
}


fn type_id_of<T>(val: T): int {
    type_id::<T>()
}


@startup
fn main() {
    print(any::from(6).cast::<int>()!)
}
 
